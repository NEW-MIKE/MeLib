<br>2022-04-10 11:34:07:布局onehour，就是对一个个的元素进行约束，一个元素的存在，会以一个什么样的姿态存在，可以同时变化，同时操作，依据屏幕的大小进行必要的操作，可以有颜色，长宽，内边距，外边距，定位一个元素，如何其长宽比容器更大，如何，如何容器是变化的，又如何，本质上来说，其存在的形式，以及与容器的关系，是如何表征的，如何的约束，如何的容纳，这是一个模型，也是亦可以借鉴的模型，那就是对于一个管理者与被管理者的控制模型，控制的属性都是一致的，都是长宽这种空间距离，这个可以直接命名为空间编程，还有时间编程，那就是业务逻辑的交互，空间和时间的编程，双向的编程，空间的管理和时间的管理，就是一个个序列化的对象，以及对象之间关系的鉴别，世界之道，是什么样的存在的方式，并且这样的编程，是可以跟随空间的容器，进行公式化的调整的，可以建立不同的模式下的不同的适配的方案，对于空间的编程，编程的对象是什么，编程的对象，本质上就是长宽以及在容器里面的位置，不管是什么元素，在这里的选择都是自己期望的长宽以及在容器里面的位置，容器是受具体的操作系统和硬件来进行约束的，操作系统将硬件信息进行了抽象，放在此处进行约束，一个元素，可以在容器里面进行约束，至少需要两个坐标，x和y，两个坐标，具体关连的对象，可以是上下左右，也可以是已经定位了的内部的元素，就是说，参照系可以灵活的选取，在抉择上面，如果页面是一个可以多元的选取，选择，可以在自己的想象空间内部，多远的拉取，拉伸，也不应该产生错误的显示，对于不同的约束，在不同的控制空域里面，按照这样的空域，同一套布局，在不同的布局系统里面，如何地展示，如何的消化，如果超出了怎么处理，到此为止。<br><br>2022-04-08 16:34:09:平行世界，TwoWorldRun，仿照外部的世界，建造一个内部的世界，在平行的世界里面找路，找人，找力量。建造新的世界。把握世界，灵活多变。设定各种场景，自己完成这样的场景里面的心理建设，体感建设。全能选手，戏剧场所一般。1.1工作与创业，战场，商场，谈判场，人物，会议。2家庭，母亲，孩子，亲戚。3政府，4房子，物语<br>2022-04-08 16:22:11:谨慎聪明，严谨，干净，果断，严格，强壮，等等维持和增长，独当一面，有功德之心，照镜子，有担当，敢于面对生死，有计划，有魄力，和谐。活成这样子就没有白活一场。把生活和自己活成一个艺术品，灵性的物品。2,无声的协议，博弈的变化。生活的任何变化，时间都会给自己带来新的冲击，时间空间威胁，必须协调控制住来自这里的挑战。我们自身是签了协议的，和人性，和社会制度，和其他人，签的是没有声音的协议，我们受了这个的约束，也因为这个我们可以行驶我们协议的内容。比方说向别人卖东西，买东西，无形的协议尽在其中。3主仙牌，采访古人和未来的人，问路，问另外的自己。3.1老祖宗，3.2我的孩子3.3幺爷，3.4我的朋友3.5台湾的老师3.6,开国国父。4历史长廊，在历史里面，徘徊，找到自己的道路。4.1山顶洞穴4.2三国时期4.3雅塔尔会议4.4联合国建立4.5建国会议4.6改革开放5.中统局局长，在此处放置理性的决策，接下来该去做的事，不可抗拒的事，在做事的迷途中，还能够找到归处。按照规则，自动生产，自己来这里领任务。做决策的人和执行的人格分裂出来。坚决执行，想方设法执行。派发任务修正任务。<br>2022-04-07 18:00:42:那我这一期，就推销算法论，线程论，架构论，java论。<br>2022-04-07 17:52:50:或者回答，我可以给贵公司带来什么，从专业的角度，就像是一个专业的公司，向对方推销自己的产品一般，如何介绍自己的特色，以及具备的能力，这样的能力是如何保障的，保证的，那就拿出推销的人的口吻来，面试的时候，就用这样的口吻，准备基础知识的时候，也要这样的操作，系统性的提供这样的生产模式，生产能力，生产方式，生产出具备质量的产品，然后把这些产品写好说明书，再向别人进行推销。总的说明书就是建立，推销的过程就是面试，<br><br>2022-04-07 17:42:57:Android开发是怎么回事，如何make it simple，直接下结论的心态，另外，提一个点，目前我是具备开发自己的模块的能力，硬件，软件通吃的能力，直接编程的能力的。那么，Android的开发，借助JVM与系统交互的能力以及自身对进程管理的能力，将预定义的UI以及UI交互能力，寄生在系统之中，进一步将操作系统应用化，硬件产品化。核心是什么呢，就是在我的UI下面的逻辑的支持，多线程等的逻辑关系是什么，如何应付，交互的是什么，回到关于细节的层次上来看，将我们的线程分配给不同的任务，如何看待这样的多线程，基于多线程的开发模式是什么呢，就是一开始，我的事情，就不是给一个人做的，而是多个人做的，或者说，一开始，我的计划就是一个多人协作的模式，我的安排一直都是，标准的10线程作战，十人小队的作战，组合成为生产线，流水线的生产模式，数据生产和依托，生产的工序如何协调，模型就是一个管理中心，如同接单系统，然后内部的生产，提供产品，就是一个工厂的生产的模式，任何一个程式，都是可以进行在工厂的生产的场景下进行的，生产的模式，以及如何生产，整个的模型，就可以拆成一个工厂的生产的模式，将一个工厂寄生在Android系统之中，制定生产能力，生产目标，标准化生产样式，验证整个生产能力的有效性，生产的页面，以及页面的逻辑，都是生产出来的对象，这就是另外的一个工厂，奠定这样的工厂，提供工厂给别人进行使用，这就是创业者，生产者的职责，给这个世界创立更多的工厂，生产很多的具备转化能力的程式，具备能力，将这些能力进行叠加，赋能更多的选项。然后就是表现健壮的产品。可以进行消费的产品。<br><br>2022-04-07 16:20:36:想办法再HR和面试人员的脑海中进行洗脑的操作，建立犀利的形象，靠谱度，可信任度的开发和维持，增加增长，这是一项能力，奠定信任的能力，那就是去做一个可以信任的人，做一个值得别人依托的人，交付的人，那么，整个过程该如何解决呢，对于IT人员来说，那就用简单的多线程模型，垃圾回收模型，类加载模型，自定义View模型，事件监听模型，总的来说，就是要有一个健康的可以拓展的体系，对于Java基础的验证，面向对象的验证，或者说，自己对于别人的信任的第一句话，该如何说，数据结构，拓展，一句话奠定基调，先对整个的情形定一个基调，基于这个基调，再做一个展开的描述，基于这个情形，将建立生产出来，还有市场的调研工作，如何展开，从自己的角度来说，什么才是那个最关键的问题，收集问题和思路，解决问题。<br><br>2022-04-07 15:33:25:从目前收集到的信息来看，重要的信息还是对于多线程，自定义View ,类加载，垃圾回收，还有面向对象，这是基础的层次，需要在这个的基础的层次上面，进行一次凝聚，这一次就可以先进行原材料的收集工作，然后考虑加工的方式，然后将加工出来的东西进行产品，作为产品，呈现给别人看，然后去论证自己的这个结论。需要去筛选出其中的20%，然后针对核心的20%，进行处理凝结，也是自己的一个未来工作的一个场景的显要的总结，还有工作内容的一个展示，工作内容的一个保证，预埋一个潜台词，要把这个潜台词，或者说结论，埋好了。<br><br>2022-04-07 15:09:32:此处探讨，简历修改的事宜，在Android的世界里面，要能够完成这样的开发，承担起这样的职责，应该具备什么样的模样，应该具备什么样的姿态，如何先说服自己的基础上，再去说服别人，我需要在这里，找到自己的道路，要能够做到什么呢，需要要别人如何相信，自己又如何相信，如何把握控制这样的形态，真实的状态，是可以通过这样的探索，找到路的，那么，路又是什么，找到重点和难点，然后描述重点和难点就可以建立自己的优势了吗，建立和面试，面对的都是HR和IT人员，如何看待呢，了解到别人的关注点是什么，如何建立这样的关注点，建立彼此之间的联系，然后基于这样的联系，建立起彼此的信任，那就要去思考和观察，一个专业的开发人员，应该具备什么样的意识，具备什么样的姿态，表明自己的专业度，那就要向别人提供自己的专业的描述和认知，那就要对一件事，是如何开展的建立自己的认知，如何进行的，本质是什么，关键点是什么，还有自己也要建立这种双向的选择的机制，想一想别人的公司是社么样的，如何建立这种信息渠道，或者说是数学函数吧，这种思考模式，不仅仅是求职面试，在很多方面，这都是成熟的，那就是直接对接关键的决策，然后基于这样的决策，建立起来的信任，才是可以信任的，建立起来的判断，以及依据这样的判断，做出这样的决策，如何做，如何行为，如何展示自己的犀利的目光，直击要害的描述，措辞，言论，以及专业的描述和表现，自己要能够提供一个成熟的方案给别人，并且能够对于这样的方案给出具体的解说，自己就代表了这个事物本身，stupid的人，就是要将对方当作一个小白一样的人来面对，你要去说服他，带动他，引导引领他，完成这样的行为，提供一个可以信任的解决方案，并将这个方案向一个stupid的人说清楚，说明白，指导引导他，基于这样的局势，才有大战一场的生机和活力，那么整个体系，如何展开，如何描述，如何开展这样的意识攻坚战，并建立完善对应的开发的体系，原则，建立自己的思维和思考的秩序和空间，三国演义，其中的言语，就是simple的类型，对于一个应用来说，关键的是什么，我们对于一个应用的定位，在于开展的工作，本质是什么，那就要去回答，程序的本质是什么，如何认知一套程序，如何认知一个应用，有一点，是可以确认的，那就是，我们的开发，其实是建立在改动官方的代码的基础上的，在不同的程度上，改动官方提供的源码，一个代码的本质是什么呢，就是代码是什么逻辑，以及谁来调用，谁来管理调度，谁来监控管理这样的状态，在Android里面，是存在一个隐形的调用的手的，那就是操作系统，并且，由于面向对象的原因，可以在调度里面，加入自己的定制化的逻辑处理，设置相关方面的参数和原则，建立起自己的逻辑寄生在系统之中，对系统的页面和和端口重新管理，重新进行定义，对于产品的重定义，其实数据库的本质，也是对于内存的重定义，对于CPU引导的重定义，总的来说，还是一个软件的使用，如何使用好这个软件，或者说如何使用好这个程序，如何使用好编译器，执行器，还有别人的代码逻辑，这个工作的本身，就是熟练使用诸多的程序系统，来开发新的程序系统，简单的来说，本质就是对于别人的系统的了解和熟悉，以及使用手册的熟练的程度，了解的程度，以及使用的程度，最终的，还是对于Java，kotlin，编译器，执行器，以及对于世界的了解的程度，了解别官方提供的能力，以及自己基于这样的能力能够做什么，对于系统了解多少，如何在系统的脚手架上面，搭建自己的大厦，如何利用别人的工具，完成自己的开发，如何开发一个个寄生在系统中的逻辑，以及配套的测试工具以及相关的约束的流程，重新定义表现，利用软件，显示软件，对于各种部件的能力的认知和使用，然后是对于现实的一个认知的辨认，对于模块具备的能力的准确的认知，很关键，知道能干什么，可以做什么，还有我可以做什么，还有就是面向编译器的作业，对于编译器的规则的熟悉和了解，目的在于生产自己的控制指令，接管运行文件，察觉规则，并在规则之上，建立自己的行动行为和策略，了解规则，利用规则，熟练规则的使用，然后看一下，有哪些工具可以使用，可以方便自己的作为，然后看一下别人的想法，还有自己的想法，如何建模的，如何操作，如何控制，控制的到底是什么，建立一个什么样的感知和逻辑常识，脱离了形式的思想的展示，那么，该如何显示自己的能干，专业呢，体现自己的能力呢，如何措辞，如何改造这一文章，我需要体现什么，胫骨如何展现，如何强悍，突出自己的优点。<br><br>2022-03-11 15:15:09:此次的onehour由于网络原因没有同步到服务器，具体的方向是对于手机的定位和定义，人机关系，以及获取以及再处理的过程<br>2022-03-08 13:22:46:https://juejin.cn/post/6950608825942868004<br><>make the best or most effective use of (a situation, opportunity, or resource)<br>2022-03-08 13:18:35:优化，做的是什么，更经济的使用手机，给用户更好的体验，可以是产品，也可以是体验，对于内存，讲道理是不属于的，那个也不是bug，至少感觉不出功能方面的异常，但是电量方面，网络延迟方面，<br><br>2022-03-08 13:07:59:关于不同api的一些思考，权限的管理，硬件的管理，内存访问权限的管理，这是一种系统调整对于应用表现的调整，我们能够受到影响的有哪些方面呢，比方说摄像头带来的更改，权限的管理策略，对于新的画中画这种新的功能的支持，新的操作方式就是在复制粘贴的时候新的ui操作，那么，如果自己的应用具备这方面的需求，那就有必要在这个方面进行新的支持，自动填充功能，省掉了操作，那么我们的应用在这个方面也要能够支持这样的效果，比方说手势等等<br><br>2022-03-08 11:51:26:优化，指代的是什么呢，这是一种对待，为什么会出现优化，就是说，对于Android表现出来的性能，有一个常规的操作的控制，时间，空间，找到可以平衡的点，一个应用，有什么需要优化的地方呢，<br>2022-03-07 13:32:04:对于自定义view，在整个系统里面是一种藕断丝连的关系，整个页面的操作，面对的是一个整体的操作，本质上来说，就是维护一个数据缓存，以及针对数据缓存的操作，但是，既然已经区分开了，那就要进行任务和设计模式的思考，进行布局，如果控制模式是这样的，那么在使用的时候，可以提供给我们什么样的机会，我们可以对相关的模块进行必要的控制，其本身也成为了一个编程点，因为每次对于参数的操作，都会导致数据的刷新，丢帧掉枕的种种操作，以及对于交互的互动效果，可以进行定制化的显示，可以想一想，下拉的效果是如何交互实现的，我们应该如何操作，站在数据结构以及职责的角度，容器是要负责自己的子目录和相关的操作控制的，如何实现，应该也是组合实现的，然后接受调用，以及可以访问，管理，调用，这种设计模式可以借用，用来自动管理这种容器的管理，本身就是一种容器的开发技术，以及对于容器以及容器外部的互动的思想，参数管理以及操作互动，如何导入以及控制管理控制，这个部分具有代表性意义可以提升为广泛性的容器化技术，容器以及对于容器的管理控制，这是唯一的选择吗，在容器里面这是好的，设置了一个，还有默认的垫底，对于这种，通过返回值看待是否需要继续调用链条，究竟是怎么回事呢，我有事件，需要交给自己的子元素处理，但是最终有没有能够处理，是需要告诉原本的事件分发者的，所以需要返回值，有点双亲委托的感觉，这是面向对象里面特有的建立起来的调用链条，那么对于一个调用，如何解绑，如何制定策略，<br><br>2022-03-07 09:14:39:兜底的部分是什么呢，就是说如果你用户不设置监听，那么，我就不用去操作<br><br>2022-03-07 09:00:31:整个自定义View的工作流程就是一个流水的流程，互相交互，互相交换信息，对于layout这种属性的参数，只能从viewgroup来管理，只有viewgroup才是那个和外界进行沟通的东西，其本身的价值，在于一个转化，更重要的是传入约束的值给子view，然后这部分入参就可以被消化掉了，也就是说，这些参数是分部分来进行消化和吸收的，在充分的消化的基础上，展开自己的论述，哪些参数，是应该放入外面来进行定义和申明的，其实对于自view来说，viewgroup那样子的操作，是有便于view的便利的操作的，因为在一定层度上的共有的参数处理，被统一处理掉了，只有不能统一处理的输入，才会放在自己的内部来处理，这样有利于标准化的操作，将所有的约束关系，转化为了简单的mode 和size两个部分，那部分处理逻辑，我们就不用获取和处理了，由系统来完成，然后，我们自己在根据自己的需要，最终确定一个值给viewgroup，然后viewgroup在确定布局，最后调用绘制的时候，统一取出这些确定的值来进行处理，进行绘制处理，以及对于自己的事件响应的控制，这些控制，有一部分也是父类或者系统完成了的，这应该就是全部了，<br><br>2022-03-06 19:43:19:自定义View的话，整个过程，会是一个什么样的过程呢，从原始的需求的角度来说，我们对于页面的需求的一个解决方案，应该是什么样子的，有哪些问题需要去解决，哪些问题，能有什么问题，在目前观察的范围内，都是一些什么问题。去思考他。<br>2022-03-06 19:26:45:多线程，我们会有什么样的状态呢，会有创建，开始，结束，运行，暂停，挂起，一个任务的生命周期，以及和其他线程的约束，彼此之间订立的关系，是一种线程和线程之间的关系，彼此之间具备相对应的约束原则，可以让别人等等自己，可以通知其他的等待的线程，这一点上面来说，线程通知的部分，是一个共享的变量，可以执行相关的共享的访问，创建一个线程，我们的线程在代码组织上来看，是一个包含了两个部分的声明的变量，原则上来看，就是说，我申明了一个对象，并且在声明的时候，定义自己的将要执行的内容，并且启动自己的执行的任务，彼此之间，应该是维护在同一个数据结构里面的，否则，其变量，是无法共享共同操作的。我们该如何讲清楚多线程的模型，首先要讲清楚，在理论上，多线程是怎么回事，其次是多线程的代码实现，其根本的第一个原则问题，就是变量的竞争，然后针对竞争采取的锁的机制，以及再锁的角度，衍生出来的诸多的问题，然后是线程之间的协调，然后是基于运行器的考虑。加入的线程池，这个是从整体性能的角度考虑的，如果对于锁的机制，是否与线程的状态有关系呢，锁的机制，保护的共享变量的操作，而线程的状态，是线程本身的状态，线程对于同一个变量的获取的时候，可能因为锁的原因而足赛吗，可以的，如果因为锁的原因阻塞了，是一直阻塞还是继续执行，一个线程，只有任务执行完了，或者线程stop了，或者出现异常了，才会退出，对于wait的原因，可以是自己调用，可以是延时，是否也是可以是锁的原因呢，我们既然可以wait，那么就注定了也必然是可以notify的，在解决线程的等待的时候，不能一直等待，需要释放锁，但是也需要将锁进行恢复的操作，既要保护共享变量，其实，线程的状态，不能被锁的内容全部代替掉，因为线程之间的相互等待，完全与锁没有关系，这是不考虑有竞争的关系下的彼此之间的一种协调，如果想要同步音频视频，那么，会如何同时操作，有对于线程内部的关注，有对于线程之间的关注，有对于线程创建销毁对于计算机的关注，整体上，都全部关注了一遍，其实这种竞争，不仅存在于彼此之间的写的竞争，也同时存在读写的竞争，那就是写的时候，我可以读吗，也存在同一时间，只能由一个来改变，或者说写的时候，我不能读，读写锁应该就是如此解决这个问题，可重入的呢，加入的是一个时间的属性，如果不成功，就可以退出来，不用阻塞，但是也可以等待啊，难道不用等待吗，锁本身，也是有问题的，那就是死锁问题，对于锁，有几种情况，那就是等待锁，获取到锁之后，条件不满足，释放锁。线程还区分为守护线程和用户线程，可重入可以解决死锁问题，相互持有会导致死锁的存在，由于可重入的时间的机制，那么，可以得到一定的补偿，那么在读的过程中，是否可以写入呢，如何写入，对于读写的一种精细化的管理，那就是最大程度的体现性能方面的优势，写可以在任意的时刻进行写入，是乐观锁，只能等待读完再写是悲观锁，然后关注的点还有是否可以返回，以及传递变量的问题，上下文的传递的问题，原子操作问题，以及优化，阻塞，既然可以阻塞，那为什么还会要他存在，应该直接替换掉就可以了，或者说，我们在面对多线程的时候，应该思考哪些环节，哪些方面，如何想象这个空间，线程的任务的返回值，一种高精度的控制手法，多线程之间的读写，读写控制，线程状态的控制，线程的优先级，线程的返回值，现有的轮子，如何选择一个锁，在面向开发的时候，用的比较多的，是一个sychron这样的，为什么不用其他的呢，其他的锁，是一种优化，可重入，读写锁，乐观悲观锁，原子操作，是一个类似于基本数据变量的东西，是因为，我们不需要这样的复杂的操作，以及没有这么高的性能的追求，所以不需要这些的操作，线程的依托，那么，对于Android来说其多线程是建立在Java的基础上的，一般都是可以直接使用的，因为其本身就是Java语言，只不过在此基础上，我们建立了handle机制，这种机制有消息池，循环，对于Looper来说，就是一个main的操作，可以建立了handle的时候，其实就是已经绑定了的，总而言之，我就是需要给我的handle绑定一个已经ok了的looper。需要直接的获取过来，然后操作。可以说，这两者之间是一个绑定了的关系。<br>2022-03-05 19:28:19:上锁意味着什么，为什么会有不同的线程池，不同的线程池的本意是什么，其设计者当初是站在什么样的角度来度量的，如果我是当初的设计者，一个线程安全的变量，是否其读写都是加锁了的，还是说读写都是分开的，该关键字意味着什么，锁住的地方以及用什么来锁，别人的使用的地方的底层，是什么，因为什么，出于什么样的考虑，面临了什么问题，还可以有其他的表现形式吗，如果是最优，为什么最优，如果不是，是什么约束了不能成为最优，在此处，需要一次现场的思潮，直接回答自己的问题，应该说，这个关键字是公用的，使用的逻辑，是如何的使用的过程可以推导出来什么东西，<br>2022-03-05 18:48:07:线程安全，可以说成，在线程里面是安全的，除了view这类别的管理和控制，<br><br>2022-03-05 18:43:11:<br>2022-03-05 18:42:59:线程组安全，什么叫做破坏，就是其不能完整执行，在做的过程中被其他的方面入侵破坏，导致一致性不能保证，说到安全，说到的是一种威胁，但是一个数据，为什么会有安全和不安全的说法呢，这个安全是对谁安全，对谁有风险，我们的程序最终是服务于我们自身的，每一个应用，都是我们现实的一种映射和映照，一个真正能够给多个线程使用的变量，必然是一个可以多个线程使用的对象，比方说钱，比方说，那就要去想，在现实之中，我们的什么东西是那种多个线程共同持有吗，必然是大家都在竞争的东西，如果对于资源的把控实现不了风险的屏蔽，会造成死亡吗，会造成危害吗，我觉得会的，至少在别人看来，这个东西不稳定，必然会产生厌烦的情绪，对于希望使用它的人来说，必然会产生伤害，压抑，甚至是怀疑，任何的可能给对方造成负值的行为表现，应当视为一个不安全的动作，安全的意思是说其完整性的保证，线程安全，是说，任何线程都威胁不了它的完整性，那么他就是可以操作的，可以通过的，其完整性不会被破坏，那么线程与线程之间，是如何协调的呢，为什么要协调，我需要你等我执行完了，你才能退出，什么是主线程，使用各种不同的锁来实现不同代码块的保护，以及不同代码的唤醒，为什么需要唤醒，可能因为某个原因，条件不成熟，导致了线程的阻塞，那么，在任何一个多线程的场景里面，Android的多线程场景里面，是不是也是如此，多线程的编程模型是否也是如此,当数据返回来的时候，唤醒等待的线程，执行数据的返回操作，那么所有的异步操作是否在信息同步的时候，也是基于这个模型呢，我觉得是的，所有的模块，在构造异步的时候，必然也要牵涉到如此，在构造大任务的时候，还需要线程池，以及对于想要保护的数据进行线程安全操作，最终完成自己的一个基于多线程的基础模块的构建，这是构造的基础和前提，而且对于service和活动之间的沟通，我觉得怀疑也是通过这样的机制完成的，这是所有的操作中的基础，是一切神秘感的基础，在其他线程里面操作变量，线程持有线程，线程之间的等待，数据结构，基于多线程的模型的搭建，想想都激动，很好，那么，基于多线程，普通逻辑，数据结构，就是一切模块背后的神秘的地方，是否彻底揭开了所有程序的神秘感，类加载，注释，多线程，基本程序的操作，变量与线程，值得思考，变量，线程，算法，进程，组成了一切。其本质还是操作系统的管理，体本质还是程序指针的逻辑，只要能够获得就可以实现，在这个寻址基础上，完成上层建筑的构建，进程，线程，数据结构，算法，建模，这就是计算机的所有的本质和对象了吧，那么，我所有的操作，都是基于这样的模型构造基础上完成的抽象和整合，线程池是用来维护的，自动处理，线程池是如何调动的呢，是基于runnable的控制，<br>2022-03-05 14:53:25:多线程，处理的整个的布局是怎么样的呢，多线程处理的本质还是对于数据的处理，相对于单线程模型，其数据的访问存在竞争，读写竞争，如何解决这种竞争呢，以及如何解决这类的问题呢，我们还要面对gc的问题，线程本身的限制，线程的状态，线程对数据的竞争，如何针对性的展开描述，会有哪些问题，如果要被淘汰，留着是为了兼容吗，那么以后就可以直接使用替代的产品了，是为了以后还能够进行使用，将非线程安全转化为线程安全，为什么叫做线程安全，安全在英文里面是什么意思，反义词就是破坏吗，<br><br>2022-03-04 13:03:59:线程的点在于不同的线程池，不同的锁，对应的不同的状态的调整，那么对于多线程中变量，会遭遇到什么样的使用场景呢，有一些是读写分开，不成功就等着，需要去想想哪些场景比较多样化，那么线程池本身是什么呢，可以限制的就是线程的容量，线程的状态有哪些呢，等候，运行，暂停，协同的话如何协同呢，来一次深度的阅读吧，解决这个问题<br><br>2022-03-04 12:55:14:多线程模型在任何的地方都是应该被考虑的模型，其本身涉及到线程池，线程安全，线程锁，以及进行摸底，哪些可以用于多线程，哪些不能，那么怎么办才行，才能解决这个问题，该如何看待这个问题，这是一个系统的问题，其问题模型就是一个变量和线程多对一问题的解决，有一些变量和类不用线程安全，因为其本身就可以影响到效率，所以从效率的角度来说，默认都是线程不安全的，这些不安全的线程，可以对其进行加锁处理，那些线程安全的，就可以直接使用了，两者之间是可以相互转化的，线程安全针对的是同一时间是否可以进行修改，对同一块内存的操作，线程池以及线程的精细化控制，线程的状态，状态的调节，控制，线程与线程之间的协作，<br>2022-03-04 10:44:27:Android的适配，对于一份设计稿来说，我们的设计稿的宽度和高度，一般都是固定的吧，那么，这样一个固定的值，在我们的真实的设备上，会是什么样子的呢，dp的这个东西，该如何理解呢，真要去做，我们也应该是将我们的设备等比例转换为我们想要的值来进行换算，就是将同一个值进行等比例的换算，然后把结果进行统一，密度的意义是什么，就是单位量里面有多少值，那么换算成为实际的将是多少值，换算出来的东西，需要做一次等比例的换算，我们的输入是什么，输出是什么，dp是输出值，那么其输入值是什么，输入值是长宽像素点和斜长度尺寸。总的来说，定量并不适合用来理解，<br>定量是用来计算的，定性是用来理解的。这是真理<br><br><br>2022-03-03 21:00:27:数据结构，本质为数据和数据地址，数据地址的地址，其本质是数据块的存储，以及如何找到其他的数据块，将数据块的信息放进去进行处理，体现出功能性的功能，能够完成辅以它的任务，其结构就是代表了规则，存储的规则以及访问的规则，基于规则的基础来添加其他的规则，构造出更复杂的规则，根源还是思想，依据思想制定规则，涵盖这样的基础的规则，规则的规则，基础的理念是构造的基础，是思想的思想，首先就要想想，为啥要设置 这样的结构，数组的结构，链表的结构，以及基于这两者建立的上层的建筑，其子元素之间相互之间是什么关系，在整体上是什么关系，可以拥有什么样的，如何组织每一个个体，如何在个体之间寻找到平衡，如何布局达到利益最大化，目的在于数据的组织以及从数据中创造价值，算法是基于这样的结构，在数据之中找出价值点，如何创造价值也是编程的任务，整体来说还是数学思维，函数的输入输出，每一个app,操作系统都是如此，如何组织处理管理数据，如何表示这些数据是第一位，其次才是如何处理，然后是获取，我们表达数据的方式，类，对象，数组，链表，以后怎么找到这些数据，数据的表示是很有意思，从设计模式的角度来说，目的在于杜绝数据之间的强制性耦合，至少在编码的层次不耦合，逻辑的层次也不耦合，只存在单纯的可替代的调用，获取信息以及信息具备的能力，获取到信息，处理信息，在信息方面的代表，信息的传递处理，算法的目的，在于数据的组织，以及获取到一定的目的和意识，不管规则的意义，规则的推导可以带来什么样的意义，编程就要有黑箱以及黑箱的解析<br><br>2022-03-03 14:55:47:对于本系统的一个考量是什么呢，建立了一些观察世界的模块，这些模块的现实驱动比较少，针对性的使用了部分模块，特别是onehour，给自己提供了很好的支持，自己都应该好好想想，如何让各个模块各司其职。这很重要。<br><br><br>2022-03-03 14:40:45:Android的开发，意味着我们是有一堆的数据要去处理，需要借助一些输入输出系统，搭建好系统，完成我们的的映射的关系网络，我们的开发，是基于一个系统的基础上，在模型的模型上面，建立起来的系统，我们是在一堆的工具上添加的新的组合，其最终的意图是什么呢，我们又用什么样的工具和流程来表达我们的意图，以及为了更多的公平，如何设定各种各样的限定，提供什么样的规则，以及相应的规则如何运作，我们必须清楚的意识到，无论什么样的规则，最终解决的都是现实中的问题，我们面的的相关的问题，如何解决，目前有什么样的方案，为何会要如此，如果说现实的规则，决定了我们的调用的者，那么，是什么产生了这些调用者，支持这些思想的逻辑是什么，目前的操作系统，已经可以让我们不去考虑CPu如何处理问题了，已经把这个问题，转化为了其他的问题，我们作为一个开发，最终的就是要解决信息流动的过程中的种种问题，面的Android，自己第一感受到的，是模块之间高速的信息交流，直接表现出来就是信息的输入输出，就是一种交易，我给你什么，那么，你又会给我什么，这是数据交互的时候，应该去考虑的事情，一件事情要去好好的考虑这样的事情，先要定义其功能，然后才是完成这些功能的接口，每一种设计模式，都是一个愿景，以及我们如何实现这样的愿景，那么，我们该如何看待Android的整个开发，当我谈及Android的时候，我的脑中应该是一个什么样的光景：<br>这是一个在物理世界里面的各种设备里面，长短不一，里面跑着不同的操作系统，系统上面跑着各种各样的应用，而自己的应用将要加入到这样一个大军之中，透过这样的硬件设施，服务于站在其面前的种种的人，他们利用这个组合，实现了自己的种种的目的和意图，在每一个应用里面，我们可以看到种种不同的启动模式的Activity，Service，Broadcast，ContentProvider，Fragment，拍成一个个的动画，从点击的那一刻开始，就开始触动了Activity里面的任务，更新了View，传递数据，启动新的Activity，改变相关的数据，启动新的逻辑流程，修改数据，访问数据，获取数据，存储数据，埋点数据，采集数据，多线程的话，就是开启一个模型，让我们的其他的任务跑在其他的线程里面，不阻塞我们的主线程，如何将返回的数据进行同步，对于监听的接口，为什么可以这样子实现呢，在我实例化一个接口的时候，必须完成其定义，然后整体作为一个对象，传给对方，完成线程的切换以及View的操作，对于Glide的话，目的在于完成图片的渲染，EventBus是为了完成事件的传递，Retrofit是为了完成网咯请求的数据并转化为对象可以操作的方式，总而言之，就是数据来到了本地了，你将如何处理这些数据，如何收集数据，并传导到网络上去，如何整理自己本地的数据，拿到了数据，在显示之前，如何处理一下数据，以及放在本地进行缓存的策略。<br>另外，开发还涉及到组件化，插件化，sdk的开发。从另外一个角度来说，我们对于GC等等模型，是一种误解的存在，只需要去考虑其职责，就可以知道，其模型，也可以通过其特色，推导其功能，有点，弱点，以及相关的方面如何弥补，当然，也要论及到整个的开发的流程中，种种的流程如何主导，设计开发测试上线，种种的流程的动画是什么样子的，在目的意义的带动下的意图是什么，统统地动画化，将变得清晰起来。将每一本书动画起来，再加上意义，意图，精神等等。以及自己的应用健壮性，结交的朋友多不。还要提醒自己一点，如何才是一个合格的专家以及目前自己的脑袋中，拥有的是什么。如何炖起来。<br><br><br>2022-03-02 15:47:14:Android 的面试，面向的是一个基于系统输入输出的考量，如果从非计算机的角度来看待一个系统，形而上学上，我们是在创造一堆的名词，并把这些名词关联起来，IT的世界，是一个信息处理的世界，信息的源头，就是我们软件获取龙头之水的地方，所有的信息，都来源于电信号，电信号是属于传感器产生，世界和人，是触发这个数据驱动的源头，从这个角度来看，整个计算机系统，是一个响应世界变化和人为驱动的系统，可以响应个人的请求，也可以备份世界的历史数据，并且对这些数据进行处理和识别，在这个系统的外面，是一个人类的世界，两个世界是一个平行的交互的世界，这一切，也是产生规则的场地，最终决定了什么可以产生，如何产生，这就是调用的根本的源头，也是项目需求的源头，再次看来，站在计算机的角度来说，就是对于产生的请求，如何处理，我们可以开启一个进程，也可以开启一批的线程，建立线程以及线程的任务，对这些请求进行处理，从Android的系统模型来说，一个活动的使命是如何被定义的，整个活动是如何被安排的，服务是如何定位的，contentprovider是如何定位的，broadcast是如何被定为的，这四个部分，是组成Android一个应用的基本元素，一个应用，存在于一个系统之中，最终也会以一个进程存在，进程里面必然包含了众多的线程，客观上来说，Android操作系统，就是一个共生的应用平台，一个应用响应或者说信息的输入，来自己系统本身，来自于其他应用，来自于人的操作，其本身就是一个应用的修罗场，具备自己的信息采集和信息输出的源头，而对于这些信息的采集和输出，来达到一个信息生态的平衡，其本质是一种信息的响应的模型，而在计算机的角度，就是一个多进程的处理的过程，这个过程，是操作系统来完成的过程，页面的绘制，应该是一种栈的数据的创建和消除的一个过程的响应，本身还是一个程序的创建和消除的过程，站在一个应用内部，服务，活动，broadcast，contentprovider，彼此之间的操作的对象，可以理解成为一个数据库和一个中断响应的机制，我们需要快速的进行数据的处理，比如在广播之中，快速的启动某一个应用，在服务之中，执行后台的程序，服务的程序的设计，是不受页面的影响的，本身就没有做这样的一个的接口，所以，在屏幕变动的时候，相应的函数不会去响应，也不会去调用，这种模型如何实现的呢，从数据结构和算法的角度来说，如何展开这样一个的数据结构以及管理器的设计，在设计的前期，也要能够意识得到，android操作系统的本身，已经在其父类里面完成了基本的代码的设置，我们是在这个的基础上进行的操作和工作的任务的累积。从系统的架构来说，MVP和MVVM，目的在于降低耦合，在设计之初，就把相关的逻辑进行切割，软件设计的一个目的，并不仅仅只是为了能够进行使用，还要能够适应外界的变化，以及能够快速的进行响应，这两个模型，要从设计模式的角度来进行思考，MVVM是不考虑View的存在的，数据是不考虑其逻辑存在的，数据本身不知道逻辑的存在，逻辑不知道View的存在的，从数据的源头，经过逻辑处理，到达页面的显示，只有下层知道上层，单向的流动，而另外的，MVP的话，就是将MVC不仅关注什么时候调用，也要关注做什么变成了只关注什么时候调用，不关注做什么，Fragement采用的是一个碎片化的处理的机制，这也是一个数据模型，可以重新的进行页面的绘制和调整。从面试的角度来说，完成项目是如何使用这些知识，基本的Android的知识，线程池的使用，线程安全的类型的设置，以及开源产品的设置，都是重要的东西。Android系统的支持，一个是用于定制化个人的信息浏览，另外一个是用于辅助自己记忆效果的，另外一个是计步器，都是服务于自己的有效的工具，软件的优化和发布，还要去关心如何让自己的应用表现得更加优良，有用。从这里来说，即是要面向使用者去编程，这才是价值体现的最直接的方式。让所有的人得到自己的服务，那么，就可以升级自己的价值，也是快速让自己成名的有效的方式。这一切，都值得去关注。<br>2022-03-01 15:24:56:首先是项目描述，项目描述的意义在于，你用了哪些知识，有哪些问题，是如何解决的，目前的项目，估计遇到了权限的问题，针对高版本的系统，需要进行新的升级，三个项目，分别使用了MVVM，MVC架构，使用了单例模式，工厂模式，在此处描述项目用到了什么样的知识，整个体系的架构和是如何运作的，如何组织起Android和Java的知识的，Android的开发的机制，就是对于前端View的交互和信息的交换识别和处理，Java在其中的意义，在于提供一个具体的语法级别的知识和实现，以及对于Java虚拟机对于内存的管理和控制的方面的展开和描述，业务如何转化为需求场景，场景如何转化为项目场景，项目场景如何转化为Android技术，Android技术如何转化为语言技术，所以描述的时候，可以从这个角度来解决项目层次的描述的问题，三个需求，一个就是定制属于自己的Wandroid移动端，一个就是制造一个辅助自己记忆的应用，另外一个就是一个计步器，如此完成了业务场景的描述，在项目的层次，描述采用的MVVM架构，MVP 架构，整体的一个实现的思路是在Service里面开启一个线程，持续监听处理加速度传感器的数据，并转化为相应的步数，通过EventBus将数据传递给Activity，MVVM是玩Android移动端，采用的Retrofit来获取服务器的数据，然后采用MVVM双向持有的方式，将View和ViewModle解绑，展现的是自己的广泛的接触，采用的ViewPager来将每一页分开来处理，关于Android的话，Activity有四种启动模式，基本模式，单例模式，singleTop模式，一般我们用的都是，对于首页这种，放在，对于通知，放在SingleTop，对于SingleTask,放在首页，和消息通知，这里映射了他的相关函数的调用，在看代码的时候，也有必要关注一下别人的相关的启动模式，在这里可以收集到必要的信息，然后是对于显示的View的展示，多线程的开发，Messege 是通过obtain，复用消息池，对于多个handle，在同一个loop里面，都有各自的target，所以不会出现数据的乱串，对于多线程，定时执行任务，数据的存储，sharepre,如果不关心返回值，那么就可以采用apply更快速，commit的话直接提交到数据库，有返回值。对于Android的多样化，可以采用制定Api调用，还有一些权限的收紧，消息的传递的方式，有EventBus，广播，AIDL，ContentProvider,文件共享，对于开源框架，了解Glide，Glide是采用缓存的机制，Piccass，监听的机制，对于消息的传递。对于Java来说，JVM的运行和运作的机制，垃圾回收，现在一般都是利用可达性原理，我觉得目的还是在于，与永久性的关联性，在于下次用到的时候，可以不必在启动类，扩展类，应用程序类，计数的话，是怎么推荐的，在相互引用的时候，不能够清除掉。对于容器的话，ArrayList，线程不安全，有对应的线程安全的类型，可以进行使用，然后最后就是面向对象编程的思想，一般都是面向接口，便于拓展，多态的机制，此处运用到的，就是一个不必和另外一个硬编码绑定，策略，监听，适配器，模板。<br>2022-03-01 09:38:56:以此日为奠基支点