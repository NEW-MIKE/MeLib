<br>2022-03-11 17:25:00:具体到第一步干嘛，第二步干嘛<br>2022-03-11 17:13:17:目录结构是什么，两个activity，一个接口，如何隔离掉后期的变动的地方，这个地方放在哪里，维护的地方，是在哪里，在里面，调用的时候，时间到了，就获取到新的数据，刷新，然后往里面继续填充，然后等待，具体细节再考虑，并在这个过程中保存相关的记录，下次打开的时候，直接回到历史纪录那里以及存储的模式的恢复，核心思想是现场的维护，这个部分比较有设计的味道，另外一个没有设计的必要性，比较简单，然后恢复现场，进行效果的美化<br>2022-03-11 17:04:10:接下来基于具体的实现以及测试用例，展开新的描述，在接口设计方面，如何设计什么样的，整个文件目录如何安排，思考文件目录，以及是否可以形成必要的sdk，描述自己的产品的优点，特点，多描述一点算法方面的考虑，然后用这个去去调动获取新的门票，时间就在这两天完成整个开发，下面集中思考整个目录结构<br>2022-03-11 17:00:01:对于加法减法分为不同的颜色，设置为圆形，等号可以进行手绘并且加一个箭头，目前解决了如何获取到足够的字符，如何维护列表，整个作为一个数据结构，亮点是什么，可以作为简历亮点的考虑来进行，从获取，到处理，到显示，交互，以及存储，存储的格式，都已经考虑到位，基本上，这个产品已经设计到位，然后考虑一下版本兼容性的问题，是否存在api方面的因素，是否存在bug，然后将其针对不同的应用平台进行发布版本，后期考虑出国，并不断的维护<br>2022-03-11 16:48:28:维护的状态，文档交互的逻辑，如何实现，工作模式或者说是算法，如何展开，这个可以维护一个预备的序列，真实记录的地方是实际使用了的地方，记录如何确认，每一条都是一个数据结构进行标识和存储，消费掉一个就记录一个这个部分的设计以及彼此之间的交互，同时维护两个列表，存储在不同的线程之中，不同的线程来不断的维护，线程对这个不断的监视，当数据缺少的时候，就直接进行补充，缓存的话就是一个缓存，为空就补充，提高速度，<br>2022-03-11 16:40:05:最后一个部分，作为空的实现，可以采用不同的颜色来区分，动态调整整合布局，再显示的时候，自动展示，然后下一步，这样下比较不妥当，给分析的机会吗，还是直接的进行进一步的推导，我觉得显示结果后进行一个3秒倒计时，然后自动移除添加新的结果，这里的交互的机制有一个原则，那就是不是所有的项目都可能是一样的，必然具有差异性，根据这种差异性，来定时思考3秒，然后继续前进，这个部分对于字体以及颜色必须妥当，开发的模式，可以先进行文档或者代码先行都是可以的，直接的结果就是等于之后给一个倒计时，直接更新等号的显示，<br>2022-03-11 16:31:52:在交互的地方，从上下的角度来考虑，如果是往下阅读的那么就是从上到下，具体设置的地方，放在title栏目，并且设置好之后动态更新下面的内容，带来新的驱动，设置的效果作为滑动的滑块的方式，先看一下别人的实现，考虑自己来进行封装，在下面的操作里面分为加号减号，等于号，在上面的话，可以根据标题的设置来动态调整，并且调整自己的序列，往上往下都是可以操作的，这个部分的显示全部采用material的风格，根据不同设置加载不同的样式，以及如何互动呢<br>2022-03-11 16:26:01:考虑采取倒计时的方式，强制性思考😔，整个ui的设计，书的第一面采用三列的方式来实现，recycleview来实现，布局的话就是这样，对于子元素，如果书的名字超过了显示就直接省略号代替掉最后一部分，这个部分需要自定义来实现这个功能，然后对于不同的适配方案，采用今日头条方案，字体的要有讲究，颜色可以考虑土的颜色，开局就是这样一个显示，最后一个的功能是用来添加书的，长按的话，也可以删除，整个列表的顺序采用lru的方式来进行排列，最近阅读的书籍就放在第一个位置，其他的顺位往后面进行移动，对于后期需要观察和需要动态更新和更改的地方，统统进行耦合的隔离，<br>2022-03-11 16:15:23:由于中文是两个一组，且在这个过程中，不能按照定期的来处理，而是应该获取到具体多少的文字，而不是其中的一半的个数，那就从其中获取组合起来，处理掉各种噪音，形成文字集合，再从这里面得到我的列表需要的内容，采取的方式可以分为两个部分，不以个数来区分，而是以当前生成的文字里面，作为第一层，然后获取到的文字里面得到第二层，坐标的话，记录两个坐标，下一次恢复，也以两个坐标来进行，倒序的话，也是从这里开始的，倒过来进行内容的分发，如果不满足，就继续获取，并且获取到对应的双坐标，进行处理，<br>2022-03-11 16:06:58:第一个展示的是一个列表，书籍的列表，存储其名字，进度，文件的路径，新建立一个处理器，无论输入的是什么，都给我一个我想要的输出，如何建立这种关系以及如何应对这种情景，对于新的各种场景，无论是什么，都可以解决并且显示出来，具备这样的能力，处理能力和能量，完成这样子的封装，在我调用的地方，不必关注且随时可以替换这个对象<br>2022-03-11 15:58:12:获取到目录，直接管理这个目录，直到什么时候获取不到的时候或者出现新的比较好的策略的时候，有一点，后期无论从哪里获取，都不能影响到我的目前的接口，<br>2022-03-11 15:55:53:本身形成的一个推导，推论，和聊天的方式，哪一个会比较好，聊天的话，不如加法的方式以及减法的方式，形成更强的推导与诱导，建立的机制，用新的机制，聊天必然需要，需要这些元素来组合，形成新的自然之力，用这个自然之力，来推进整个的力量的觉醒，推导出来，我的产品是否可以展现出新的形态，开启新的力量，<br>2022-03-11 15:50:07:聊天的就是一个加法的格式，在等于号的旁边，多了一个可以改变的按键，或者推导出来的，必然来说，会有一个思考的过程，参与度会比较高，正序逆序的一个推导，如何布局，从面推导并持续化维护这样一个列表，列表是一个书的的题目的更有动态效果的一个显示，形态化的操作，这本身就是一个艺术的作品，就要有艺术的作用和效果，简单简洁，顺畅，有动漫的效果<br>2022-03-11 15:38:59:首先，要获取到的是一份文档，拿到字符串的对象，对字符串对象做一个识别选择，根本的模型就是生成一个列表，然后动态维护这个列表，维护更新这个列表，然后显示这个列表，最后一项是否显示，可以控制，这个控制的策略，是一个ui刷新的操作，刷新列表，维护列表，展示列表，最终是一个显示之后就会变成下一个，然后再显示，是可以实现，显示，，